#shell脚本文件
[root@VM_0_16_centos shell]# chmod -R 777 test1 
[root@VM_0_16_centos shell]# cat -n  test1
     1	#!/bin/bash
     2	
     3	#查看系统用户登录的时间
     4	
     5	date
     6	who
=============================================================================
#使用全局环境变量
[root@VM_0_16_centos shell]# vim test2
[root@VM_0_16_centos shell]# cat -n test2
     1	#!/bin/bash
     2	#使用全局环境变量
     3	echo $HOME
	 
[root@VM_0_16_centos shell]# chmod -R 777 test2
[root@VM_0_16_centos shell]# ./tes
=============================================================================
#使用局部变量(引用局部变量)
[root@VM_0_16_centos shell]# vim test3
[root@VM_0_16_centos shell]# chmod -R 777 test3 
[root@VM_0_16_centos shell]# cat -n test3
     1	#!/bin/bash
     2	#使用局部变量,在内部可以使用$[变量名]引用
     3	str1="hello word"
     4	echo "showzhou :=+=+=+=+=+=+=+=: $str1"
     5	
=============================================================================
#使用系统命令
[root@VM_0_16_centos shell]# vim test4
[root@VM_0_16_centos shell]# cat -n test4
     1	#!/bin/bash
     2	#使用系统命令
     3	str1=$(date)
     4	echo  "这是系统时间: $str1"
     5	#格式话系统时间
     6	str2=$(date +%y%m%d)
     7	echo "这是格式化时间:$str2"
=============================================================================	 
#重定向输出(>：每次都更新 >>：在原来的内容上追加)
[root@VM_0_16_centos shell]# vim test5
[root@VM_0_16_centos shell]# cat -n test5
     1	#!/bin/bash
     2	#重定向输出
     3	
     4	str="这是模拟的日志类容$(date +%y%m%d)"
     5	echo $str > test5.log
	 6
[root@VM_0_16_centos shell]# chmod -R 77 test5 
[root@VM_0_16_centos shell]# ls -l
	-rwxrwxrwx 1 root root 101 Nov 21 10:42 test5
	-rw-r--r-- 1 root root  34 Nov 21 10:42 test5.log
=============================================================================
#重定向输入（<：直接输入;内连： [命令]<<EOF）
[root@VM_0_16_centos shell]# wc < test5.log 
 1  1 34

[root@VM_0_16_centos shell]# wc << EOF
> hello word
> a
> EOF
 2  3 13
 
*文本行数
*单词数
*文本字节数
=============================================================================
#管道符
[命令1] | [命令2]
*在执行命令1的时候命令2也在同时执行。数据不会在任何缓冲区停下
=============================================================================
#运算dc
*退出：quit
*scale =4	保留四位小数
=============================================================================
#在shell里面使用bc运算符(方式一)
[root@VM_0_16_centos shell]# vim test6
[root@VM_0_16_centos shell]# cat -n test6 
     1	#!/bin/bash
     2	#使用bc来运算(保留两位小数)
     3	
     4	s1=40
     5	s2=60
     6	echo "scale=2; $s1 + $s2" | bc
     7	
=============================================================================	 
#在shell里面使用dc运算符(方式二)
[root@VM_0_16_centos shell]# cat test7 
#!/bin/bash
s1=40
s2=60
echo $(bc << EOF
	scale=2
	s3=($s1+$s2)
	s3*0.1
	EOF
)
[root@VM_0_16_centos shell]# ./test7
10.0
=============================================================================
#shell脚本退出(在脚本最后协商exit)
exit [状态码]

[root@VM_0_16_centos shell]# echo $?

=============================================================================
#if-then语句(判断语句)
[root@VM_0_16_centos shell]# vim test8
[root@VM_0_16_centos shell]# chmod -R 777 test8
[root@VM_0_16_centos shell]# cat -n test8
     1	#/bin/bash
     2	#if-then语句
     3	if pwd	
     4	then
     5		echo "hello word"
     6	fi	#结束标签
     7	
=============================================================================
#if-then-else语句
[root@VM_0_16_centos shell]# vim test9
[root@VM_0_16_centos shell]# cat -n test9
     1	#!/bin/bash
     2	#if-then-else语句
     3	if grep hello* test1
     4	then
     5	  echo "有此关键字"
     6	else
     7	 echo "没有此关键字"
     8	fi
=============================================================================
#if-then-elif-then语句
[root@VM_0_16_centos shell]# vim test10
[root@VM_0_16_centos shell]# cat -n test10
     1	#!/bin/bash
     2	#if-then-elif-then
     3	if gerp *w* test1
     4	then 
     5	   cd ../
     6	   echo "运行起来了：$(pwd)"
     7	elif pwd
     8	then
     9	  echo "跳转过来了"
    10	fi
    11	exit
=============================================================================
#test命令可以使用[] 代替。但是前面和后面需要添加空格
[root@VM_0_16_centos shell]# vim test11
[root@VM_0_16_centos shell]# cat -n test11
     1	#!/bin/bash
     2	#test命令使用
     3	
     4	str="123"
     5	if test $str
     6	then
     7	  echo "有内容"
     8	else
     9	  echo  "没内容"
    10	fi

[root@VM_0_16_centos shell]# cat -n test11
     1	#!/bin/bash
     2	#test命令使用
     3	
     4	str="123"
     5	if [ $str ]
     6	then
     7	  echo "有内容"
     8	else
     9	  echo  "没内容"
    10	fi
=============================================================================
#数值比较(test 只支持整数的比较)
[root@VM_0_16_centos shell]# cat test12
#!/bin/bash
#数值比较大小
a1=123
a2=456
a3=123

if [ $a1 -le $a2 ]
then 
  echo "a1小于等于a2"
fi
if [ $a1 -lt 124 ]
then
  echo "a1小于124"
fi
if [ $a2 -ge $a1 ]
then  
  echo "a2 大于等于a1"
if [ $a2 -gt $a1 ]
then  
  echo "a2 大于a1"
fi
if [ $a1 -eq $a3 ]
then
  echo "a1等于a3"
fi
if [ $a1 -ne $a2 ]
then
  echo "a1不等于a2"
fi
exit
=============================================================================
#字符串比较
[root@VM_0_16_centos shell]# cat test13
#!/bin/bash
#字符比较
str1="hello"
str2="word"
str3=""

if [ $str1 = "hello" ]
then
  echo "str1 等于 hello"
fi
if [ $str1 != $str2 ]
then
  echo "str1不等于str2"
fi
if [ $str2 \> $str1 ]
then
  echo "str2大于str1"
fi
if [ $str1 \< $str2 ]
then
  echo "str1小于str2"
fi
if [ -n $str1 ]
then
  echo "str1长度不为0"
fi
if [ -z $str3 ]
then
 echo "str3长度为零"
fi
=============================================================================
#文件比较
*-d  file :查看file是否存在并且是个目录
*-e  filr :查看file是否存在
*-f  file :查看file是否存在并且是个文件
*-r  file :查看file是否存在并可写
*-s  file :查看file是否存在并且非空
*-w  file :查看file是否存在并可写
*-x  file :查看file是否存在并且可执行
*-O  file :查看file是否存在并属于当前用户所有
*-G  file :查看file是否存在并且默认组与当前户相同
file1 -nt file2 :查看file1是否比file2新
file1 -on file2 :查看file1是否比file2旧

[root@VM_0_16_centos shell]# cat test14
#!/bin/bash
#文件比较

str=/var/www
if [ -d $str ]
then
 echo "文件路径存在"
else
 echo "文件路径不存在"
fi
=============================================================================
#复合条件测试
[命令1]&&[命令2]
[命令1]||[密令2]
=============================================================================
#if-then高级特性
第一种：(())		算数：++，--，||，&&，...等
第二种: [[ xx==x* ]]		字符处理：可以匹配一个模式

=============================================================================
#case命令
[root@VM_0_16_centos shell]# cat test15.sh
#!/bin/bash
#case命令
str=123
case $str in
345|789) echo "为345";;
678) echo "为678";;
123) echo "为123";;
*) echo "为所有的";;
esac
=============================================================================
#for命令(修改当前目录下所有文件权限)
[root@VM_0_16_centos shell]# cat -n test16.sh 
     1	#!/bin/bash
     2	#for循环
     3	str=$(ls)
     4	echo "修改当前文件夹下所有的文件权限为：777"
     5	for arr in $str
     6	do
     7	  if [ -f $arr ]
     8	  then
     9		echo "文件：$arr"
    10	 	chmod -R 777 $arr
    11	  fi
    12	done
	
#修改版
[root@VM_0_16_centos shell]# cat -n test16.sh 
     1	#!/bin/bash
     2	#for循环
     3	
     4	echo "修改当前文件夹下所有的文件权限为：777"
     5	for arr in $(ls)
     6	do
     7	  if [ -f $arr ]
     8	  then
     9		echo "文件：$arr"
    10	 	chmod -R 777 $arr
    11	  fi
    12	done
=============================================================================
#c语言风格for循环(输出九九乘法表)
#!/bin/bash
#使用c语言风格for循环（九九乘法表）
[root@VM_0_16_centos shell]# cat test17.sh 
for ((i= 1; i<=9; i++ ))
do
 for ((y= 1; y<=$i; y++ ))
 do
   echo -n "$i * $y = $[$i * $y]   "
   if [ $i -eq $y ]
     then echo ""
   fi 
 done
done
=============================================================================
#while循环(只要等于0的时候才会退出循环)
[root@VM_0_16_centos shell]# cat -n test18.sh 
     1	#!/bin/bash
     2	#while循环
     3	i=10
     4	while [ $i -gt 0 ]
     5	do
     6	  echo $i 
     7	  i=$[$i-1]
     8	done

=============================================================================
#until循环(当命令的返回值为0的时候才会结束循环)
[root@VM_0_16_centos shell]# cat -n test19.sh 
	 1	#!/bin/bash
	 2	#untill 循环
	 3	nub=10
	 4	until [ $nub -eq 0 ]
	 5	do
	 6	  echo "$nub"
	 7	  nub=$[ $nub - 1 ]
	 8	done
	 9	
=============================================================================
#循环控制
*break		:结束最内层循环
*continue	：开始下一论新循环

=============================================================================
#接收用户输入 $1 ~ $9 (在每个使用的时候必须有空格)在第10个之后就要使用 ${10}

[root@VM_0_16_centos shell]# vim test20.sh
[root@VM_0_16_centos shell]# cat -n test20.sh
     1	#!/bin/bash
     2	#获取命令行输入的值
     3	echo "你输入的值有: $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10}"
	 4
	 
=============================================================================
#特殊参数的变量
*$0 : 显示当前shell文件的名字 ：bash
*$# : 显示命令行中输入了多少个参数
*${!$}:显示命令行最后一个参数，如果没有参数就显示shell文件名
*$* :获取命令行上所有参数(所有的当作一个整体)
*$@ :获取命令行上所有参数(每个参数当作一个整体)

[root@VM_0_16_centos shell]# cat -n test21.sh 
     1	#!/bin/bash
     2	#特殊变量
     3	echo "显示当前名字：$0"
     4	echo "显示命令行显示了多少个参数：$#"
     5	echo "显示最后一个参数 ${!#}"
     6	echo "获取命令行中所有的参数: $*"
     7	echo "获取命令行中所有的参数 $@"
     8	
[root@VM_0_16_centos shell]# ./test21.sh 1 2 3 4
显示当前名字：./test21.sh
显示命令行显示了多少个参数：4
显示最后一个参数 4
获取命令行中所有的参数: 1 2 3 4
获取命令行中所有的参数 1 2 3 4

=============================================================================
#shift :默认像左移动一位

[root@VM_0_16_centos shell]# cat -n test22.sh 
     1	#!/bin/bash
     2	#shift
     3	i=1
     4	while [ -n "$1" ]
     5	do
     6	  echo "第 $i 参数: $1 "
     7	  i=$[ $i + 1 ]
     8	  shift
     9	done
[root@VM_0_16_centos shell]# ./test22.sh 1 2 3 4 5
第 1 参数: 1 
第 2 参数: 2 
第 3 参数: 3 
第 4 参数: 4 
第 5 参数: 5 

=============================================================================
#shell列子：(修改当问文件夹下的说有文件为777 权限)
[root@VM_0_16_centos shell]# cat -n myFile.sh 
     1	#!/bin/bash
     2	#更改权限与加.sh名字
     3	
     4	for str in $(ls)
     5	do
     6		if [[ $str == *.sh ]]
     7		then
     8			echo "$str 有sh"
     9			if [ -f $str ]
    10			then
    11				chmod -R 777 $str
    12			fi
    13		else
    14			echo "$str 没有sh"
    15			mv $str $str.sh
    16		fi
    17	done
	18
	
=============================================================================
#获取用户键盘输入的值(read -r 5 -p 设置输入时间)
[root@VM_0_16_centos shell]# cat -n test1.sh 
     1	#!/bin/bash
     2	#获取用户输入的值
     3	
     4	read -p "请输入你的参数值：" str
     5	echo "你输入的是："$str
	 6
=============================================================================
#获取文件里面的一行内容
[root@VM_0_16_centos shell]# cat -n test2.sh 
     1	#!/bin/bash
     2	#19年11月26日root     pts/0        2019-11-26 08:51 (121.13.21.119)
     3	#读取文件内容
     4	
     5	read -p "请输入文件名：" str
     6	conts=1
     7	cat $str | while read line
     8	do
     9	  echo "$conts:  $line"
    10	  conts=$[ $conts+1 ]
    11	done
	12
=============================================================================
#归并日志文件内容
[root@VM_0_16_centos shell]# cat -n test5.sh 
     1	#!/bin/bash
     2	#19年11月26日root     pts/0        2019-11-26 08:51 (121.13.21.119)
     3	#归并日志文件
     4	echo "将次脚本放入所在日志文件的目录下："
     5	read -t 15 -p "请输入归并日志文件名称：" str
     6	exec 0< $str
     7	cont=1
     8	while read line
     9	do
    10	  echo "$cont : $line"
    11	  cont=$[ $cont +1 ]
    12	done
	13
=============================================================================
#输出重定向（将错误信息，和正确信息分别存入不同的文件中）
*0：标准输入
*1：标准输出
*2：标准错误
[root@VM _0_16_centos shell]# cat -n test3.sh
     1	#!/bin/bash
     2	#19年11月26日root     pts/0        2019-11-26 08:51 (121.13.21.119)
     3	#重定向的数字必须跟着> 或者< 例如：2> , >&2:(临时重定向)
     4	ls -al test1 test2 test3 test4 test5 2>test3.error.log 1>test3.success.log 
	 5

=============================================================================
#exec永久重定向
[root@VM_0_16_centos shell]# cat -n test4.sh 
     1	#!/bin/bash
     2	#19年11月26日root     pts/0        2019-11-26 08:51 (121.13.21.119)
     3	#永久重定向(echo后面跟着&2表示这条是错误信息)
     4	
     5	exec 2> test4.error.log
     6	echo "这是错误信息重定向到error文件1"
     7	echo "这是错误信息重定向到error文件2">&2
     8	
     9	exec 1> test4.success.log
    10	echo "这是正确消息重定向到success文件1"
    11	echo "这是正确消息重定向到success文件2"
	12
=============================================================================
#lsof列出打开的文件描述符
[root@VM_0_16_centos shell]# lsof -a -p $$ -d 0,1,2
COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
bash    6715 root    0u   CHR  136,0      0t0    3 /dev/pts/0
bash    6715 root    1u   CHR  136,0      0t0    3 /dev/pts/0
bash    6715 root    2u   CHR  136,0      0t0    3 /dev/pts/0
=============================================================================
#查看端口
[root@VM_0_16_centos shell]# lsof -i:8080
COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
java    2944 root   53u  IPv6  22489      0t0  TCP *:webcache (LISTEN)
=============================================================================
#阻止输出
* /dev/null	:会清空数据文件
* /tep/		:系统启动时会自动清空此文件下所有文件(任何用户都可以读写)
=============================================================================
#创建临时文件
* mktemp	:会在/tmp创建一个临时文件，其他人也没有办法读写
			 文件后面必须跟上6个X (例如：name.XXXXXX)
			 
*-t : 强制创建/tmp文件夹下。返回全路径，不仅包括文件名	 
*-d ：会创建一个临时的目录			 
=============================================================================
#tee 同时输出到屏幕和日志文件(默认的情况会覆盖原来的文件，-a就是追加)
[root@VM_0_16_centos shell]# cat -n test6.sh 
     1	#!/bin/bash
     2	#19年11月26日root     pts/0        2019-11-26 14:15 (121.13.21.119)
     3	
     4	ls -l | tee -a test6.log
     5	
	 6
=============================================================================
#trap捕获系统当前命令
*1：  挂起程序									SIGHUP
*2：  终止进程(ctrl+c)							SIGINT
*3：  停止进程									SIGQUIT
*9：  无条件终止进程(kill -9 name)				SIGKILL
*15:  尽可能终止程序							SIGTERM
*17:  无条件停止进程，但不时终止程序			SIGSTOP
*18:  停止或者暂停程序							SIGTSTP
*19： 继续运行暂停程序							SIGCONT
   :  获取脚本退出								EXIT

[root@VM_0_16_centos shell]# cat -n test7.sh 
     1	#!/bin/bash
     2	#19年11月26日root     pts/0        2019-11-26 14:15 (121.13.21.119)
     3	#trap捕获系统信号
     4	trap "echo '这是捕获ctrl+c'" SIGINT
     5	cont=1
     6	while [ $cont -le 10 ]
     7	do
     8	  sleep 1
     9	  echo $cont
    10	  cont=$[ $cont +1 ]
    11	done

=============================================================================
#将shell脚本在后台运行(在命令后面加 &)
[root@VM_0_16_centos shell]# ./test7.sh &
[1] 13187

=============================================================================
#nohup在非控制台下运行脚本(会自动将输出的内容放到nohup.out文件中)
[root@VM_0_16_centos shell]# nohup ./test7.sh &
[1] 24648
[root@VM_0_16_centos shell]# nohup: ignoring input and appending output to ‘nohup.out’

[1]+  Done                    nohup ./test7.sh

=============================================================================
#使用脚本查看进程的PID

1  echo $$
=============================================================================
#重启和停止作业
*ctrl+z :停止作业
*bg 	:后台模式重启
*fg		:前置重启

[root@VM_0_16_centos shell]# ./test7.sh 
^Z
[1]+  Stopped                 ./test7.sh
[root@VM_0_16_centos shell]# bg 1
[1]+ ./test7.sh &
=============================================================================
#nice允许启动时的调度优先级
[root@VM_0_16_centos shell]# nice -n 10 ./test7.sh 

=============================================================================
#renice更改已有运行命令的优先级。可以指定运行进程的PID来更改优先级
[root@VM_0_16_centos shell]# ps -ef  | grep tomcat
root      6933     1  0 Nov26
[root@VM_0_16_centos shell]# renice -n 10 -p 6933

=============================================================================
#at定时运行脚本(位于：/var/spool/at/守护经常每60秒就会检查一下)
*now :立即执行
*-M  :屏蔽产生的消息
*-f  :指定脚本名

#定时启动脚本
[root@VM_0_16_centos shell]# at  -f ./test7.sh now 
job 1 at Wed Nov 27 15:25:00 2019

#查看等待的脚本
[root@VM_0_16_centos shell]# atq
2	Wed Nov 27 15:49:00 2019 = root

#删除等待脚本
[root@VM_0_16_centos shell]# atrm 2

=============================================================================
#构建函数
[root@VM_0_16_centos shell]# cat -n test8.sh 
     1	#!/bin/bash
     2	#19年11月28日root     pts/0        2019-11-28 10:15 (113.77.144.16)
     3	#构建函数
     4	function fx {
     5	  echo "这是函数！"
     6	}
     7	
     8	#调用函数
     9	fx
	10

=============================================================================
#return函数的退出结束码(0~255)之间  $? 获取
#获取函数的返回值
[root@VM_0_16_centos shell]# cat -n test8.sh 
     1	#!/bin/bash
     2	#19年11月28日root     pts/0        2019-11-28 10:15 (113.77.144.16)
     3	#构建函数
     4	function fx {
     5	  read -p "请输入一个参数：" value
     6	 # return $[ $value + 2]
     7	  echo $[ $value * 2 ]
     8	}
     9	
    10	#调用函数
    11	str=$(fx)
    12	echo "返回的值是:$str"
	13
	
=============================================================================
#向函数中传入值(必须调用的时候写入值)

[root@VM_0_16_centos shell]# cat test9.sh 
#!/bin/bash
#19年11月28日root     pts/0        2019-11-28 10:15 (113.77.144.16)

function addNub {
	echo $[ $1 + $2 ]
}

if [ $# -eq 2 ]
then 
  echo $(addNub $1 $2)
else
  echo "请输入两个数字"
fi

[root@VM_0_16_centos shell]# ./test9.sh 123 3
126
=============================================================================
#local设置局部变量
[root@VM_0_16_centos shell]# cat -n test10.sh 
     1	#!/bin/bash
     2	#19年11月28日root     pts/0        2019-11-28 10:15 (113.77.144.16)
     3	#设置局部变量
     4	function test1 {
     5	   local value=1;
     6	   echo "这是局部变量：$value"
     7	}
     8	
     9	read -p "输入全局变量的值：" value
    10	echo $(test1)
    11	echo "这是全局变量: $value"
    12	
[root@VM_0_16_centos shell]# ./test10.sh 
输入全局变量的值：2
这是局部变量：1
这是全局变量: 2

=============================================================================
#传入数组
[root@VM_0_16_centos shell]# cat -n test10.sh 
	 1  function test1 {
	 2    array=($*)
	 3	  echo "这是传入的数组：${array[*]}"
	 4  }
	 5  array=(1 2 3 4 5 6)
	 6  test1 ${array[*]}
	 7
=============================================================================	
#返回数组(返回数组需要一个一个返回)
[root@VM_0_16_centos shell]# cat -n test12.sh 
     1	#!/bin/bash
     2	#19年11月29日root     pts/0        2019-11-29 14:12 (113.77.192.94)
     3	function test1 {
     4		local str=($*)	#获取数组
     5		echo "传进来的数组：${str[*]}"
     6		local len=($#)	#获取数组长度
     7		echo "传进来的数组长度:$len"
     8		for ((i=0; i<$len; i++))
     9		{
    10			echo $[${str[$i]} * 2]
    11		}
    12	}
    13	str=(1 2 3 4 5 6)
    14	newstr=$(test1 ${str[*]})
    15	echo ${newstr[*]}
[root@VM_0_16_centos shell]# ./test12.sh 
传进来的数组：1 2 3 4 5 6 
传进来的数组长度:6 
2 4 6 8 10 12	
	
=============================================================================	
#函数递归（求阶层）
[root@VM_0_16_centos shell]# cat -n test13.sh 
	 1	#!/bin/bash
	 2	#19年11月29日root     pts/0        2019-11-29 14:12 (113.77.192.94)
	 3	
	 4	function f {	
	 5	    if [ $1 -eq 1 ]
	 6	    then 
	 7	       echo 1
	 8	    else
	 9	       local temp=$[ $1 - 1 ]
	10	       local result=$(f $temp )
	11	       echo $[ $result * $1 ]
	12	    fi
	13	}
	14	read -p "请输入x!的数字：" str
	15	value= $(f $str)
	16	echo $value
	17	
[root@VM_0_16_centos shell]# ./test13.sh 
请输入x!的数字：5
./test13.sh: line 15: 120: command not found

=============================================================================	
#建立函数库
#在shell脚本中
. . /库文件名字  
